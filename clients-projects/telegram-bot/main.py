from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.markdown import hide_link


api_token = '5857994153:AAEfm0gwuI5Zp3cMR1AUKDT4y2IgqjIP_Fc'

bot = Bot(token=api_token,
    parse_mode=types.ParseMode.HTML
)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


def mainKeyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton(
            text="‚òï–ö–æ—Ñ–µ",
            callback_data="coffee"
        ),
        types.InlineKeyboardButton(
            text="ü•ê–ë—É–ª–æ—á–∫–∏",
            callback_data="bulochki"
        ),
        types.InlineKeyboardButton(
            text="üí≥–ó–∞–∫–∞–∑–∞—Ç—å",
            callback_data="buy"
        ),
        types.InlineKeyboardButton(
            text="üè¢–í–∞–∫–∞–Ω—Å–∏–∏",
            callback_data="vacancy"
        ),
        types.InlineKeyboardButton(
            text="üï∞–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã",
            callback_data="time"
        )
    )
    return keyboard



def returnKeyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton(
            text="‚Ü©–ù–∞–∑–∞–¥",
            callback_data="return"
        )
    )
    return keyboard


@dp.message_handler(commands='start')
async def startMessage(message: types.Message) -> None:
    await message.answer(
        text=f"<b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!</b>\n"
            f"–Ø —É–º–Ω—ã–π –±–æ—Ç –ö–æ—Ñ—Ñ–∏, —á—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å?"
            f"{hide_link('https://sberbusiness.live/uploads/media/post_detail/0001/13/thumb_12299_post_detail_tablet.png')}",
        reply_markup=mainKeyboard(),
    )


@dp.callback_query_handler(text="coffee")
async def callbackCoffee(callback_query: types.CallbackQuery) -> None:
    pass


@dp.callback_query_handler(text="bulochki")
async def callbackBulochki(callback_query: types.CallbackQuery) -> None:
    pass


@dp.callback_query_handler(text="buy")
async def callbackBuy(callback_query: types.CallbackQuery) -> None:
    pass


@dp.callback_query_handler(text="vacancy")
async def callbackVacancy(callback_query: types.CallbackQuery) -> None:
    pass


@dp.callback_query_handler(text="time")
async def callbackTime(callback_query: types.CallbackQuery) -> None:
    await bot.answer_callback_query(callback_query.id)
    await callback_query.bot.edit_message_text(
        message_id=callback_query.message.message_id,
        chat_id=callback_query.message.chat.id,
        text='–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –¥–ª—è –≤–∞—Å —Å 9:00 –¥–æ 22:00\n\n'
        '–ù–∞—à –∞–¥—Ä–µ—Å:\n–°—Ç–æ–ª—è—Ä–Ω—ã–π –ø–µ—Ä–µ—É–ª–æ–∫, –¥–æ–º 3, –∫–æ—Ä–ø—É—Å 14. –í—Ö–æ–¥ —Å –∫—Ä—ã–ª—å—Ü–∞',
        reply_markup=returnKeyboard(),
    )


@dp.callback_query_handler(text="return")
async def callbackReturn(callback_query: types.CallbackQuery) -> None:
    await bot.answer_callback_query(callback_query.id)
    await callback_query.bot.edit_message_text(
        message_id=callback_query.message.message_id,
        chat_id=callback_query.message.chat.id,
        text=f"<b>–ü—Ä–∏–≤–µ—Ç, {callback_query.from_user.first_name}!</b>\n"
            f"–Ø —É–º–Ω—ã–π –±–æ—Ç –ö–æ—Ñ—Ñ–∏, —á—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å?"
            f"{hide_link('https://sberbusiness.live/uploads/media/post_detail/0001/13/thumb_12299_post_detail_tablet.png')}",
        reply_markup=mainKeyboard(),
    )

if "__main__" == __name__:
    executor.start_polling(dp, skip_updates=True)